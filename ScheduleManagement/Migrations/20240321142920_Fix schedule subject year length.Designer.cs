// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScheduleManagement.Api.Db;

#nullable disable

namespace ScheduleManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240321142920_Fix schedule subject year length")]
    partial class Fixschedulesubjectyearlength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ContactMessagesGroupsBinding", b =>
                {
                    b.Property<long>("ContactMessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.HasKey("ContactMessageId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ContactMessagesGroupsBinding");
                });

            modelBuilder.Entity("ScheduleGroupsBinding", b =>
                {
                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScheduleSubjectId")
                        .HasColumnType("bigint");

                    b.HasKey("GroupId", "ScheduleSubjectId");

                    b.HasIndex("ScheduleSubjectId");

                    b.ToTable("ScheduleGroupsBinding");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.Cathedral", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemovable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Cathedrals");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.ContactFormIssueType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ContactFormIssueTypes");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.ContactMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AnonEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AnonName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AnonSurname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("ContactFormIssueTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MessageIdentifier")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ContactFormIssueTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PersonId");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRemovable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CathedralId")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailPassword")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("FirstAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRemovable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ProfileImageUuid")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Shortcut")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CathedralId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("JwtTokens");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.ResetPasswordOtp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IfUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("OtpExpired")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("ResetPasswordOtp");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.RoomType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.ScheduleSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<long>("ScheduleSubjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<long>("StudySubjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("StudyYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("WeekdayId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleSubjectTypeId");

                    b.HasIndex("StudySubjectId");

                    b.HasIndex("WeekdayId");

                    b.ToTable("ScheduleSubjects");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.ScheduleSubjectType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleSubjectTypes");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.Semester", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.StudyDegree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("StudyDegrees");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.StudyGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudySpecializationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudySpecializationId");

                    b.ToTable("StudyGroups");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.StudyRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<long>("CathedralId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("RoomTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CathedralId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("StudyRooms");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.StudySpecialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("StudyDegreeId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudyTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StudyDegreeId");

                    b.HasIndex("StudyTypeId");

                    b.ToTable("StudySpecializations");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.StudySubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("StudySpecializationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StudySpecializationId");

                    b.ToTable("StudySubjects");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.StudyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("StudyTypes");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.WeekScheduleOccur", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OccurDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("ScheduleSubjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("WeekIdentifier")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleSubjectId");

                    b.ToTable("WeekScheduleOccur");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.Weekday", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Weekdays");
                });

            modelBuilder.Entity("ScheduleRoomsBinding", b =>
                {
                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScheduleSubjectId")
                        .HasColumnType("bigint");

                    b.HasKey("RoomId", "ScheduleSubjectId");

                    b.HasIndex("ScheduleSubjectId");

                    b.ToTable("ScheduleRoomsBinding");
                });

            modelBuilder.Entity("ScheduleTeachersBinding", b =>
                {
                    b.Property<long>("ScheduleSubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.HasKey("ScheduleSubjectId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScheduleTeachersBinding");
                });

            modelBuilder.Entity("StudentsSpecsBinding", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudySpecId")
                        .HasColumnType("bigint");

                    b.HasKey("StudentId", "StudySpecId");

                    b.HasIndex("StudySpecId");

                    b.ToTable("StudentsSpecsBinding");
                });

            modelBuilder.Entity("UsersSubjectsBinding", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudySubjectId")
                        .HasColumnType("bigint");

                    b.HasKey("PersonId", "StudySubjectId");

                    b.HasIndex("StudySubjectId");

                    b.ToTable("UsersSubjectsBinding");
                });

            modelBuilder.Entity("ContactMessagesGroupsBinding", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.ContactMessage", null)
                        .WithMany()
                        .HasForeignKey("ContactMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.StudyGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleGroupsBinding", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.StudyGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.ScheduleSubject", null)
                        .WithMany()
                        .HasForeignKey("ScheduleSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.Cathedral", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.ContactMessage", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.ContactFormIssueType", "ContactFormIssueType")
                        .WithMany()
                        .HasForeignKey("ContactFormIssueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ScheduleManagement.Api.Entity.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("ContactFormIssueType");

                    b.Navigation("Department");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.Person", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.Cathedral", "Cathedral")
                        .WithMany()
                        .HasForeignKey("CathedralId");

                    b.HasOne("ScheduleManagement.Api.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ScheduleManagement.Api.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cathedral");

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.RefreshToken", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.ResetPasswordOtp", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.ScheduleSubject", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.ScheduleSubjectType", "ScheduleSubjectType")
                        .WithMany()
                        .HasForeignKey("ScheduleSubjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.StudySubject", "StudySubject")
                        .WithMany()
                        .HasForeignKey("StudySubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.Weekday", "Weekday")
                        .WithMany()
                        .HasForeignKey("WeekdayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleSubjectType");

                    b.Navigation("StudySubject");

                    b.Navigation("Weekday");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.StudyGroup", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.StudySpecialization", "StudySpecialization")
                        .WithMany()
                        .HasForeignKey("StudySpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Semester");

                    b.Navigation("StudySpecialization");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.StudyRoom", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.Cathedral", "Cathedral")
                        .WithMany()
                        .HasForeignKey("CathedralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cathedral");

                    b.Navigation("Department");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.StudySpecialization", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.StudyDegree", "StudyDegree")
                        .WithMany()
                        .HasForeignKey("StudyDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.StudyType", "StudyType")
                        .WithMany()
                        .HasForeignKey("StudyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("StudyDegree");

                    b.Navigation("StudyType");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.StudySubject", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.StudySpecialization", "StudySpecialization")
                        .WithMany()
                        .HasForeignKey("StudySpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("StudySpecialization");
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.WeekScheduleOccur", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.ScheduleSubject", "ScheduleSubject")
                        .WithMany("WeekScheduleOccurs")
                        .HasForeignKey("ScheduleSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleSubject");
                });

            modelBuilder.Entity("ScheduleRoomsBinding", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.StudyRoom", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.ScheduleSubject", null)
                        .WithMany()
                        .HasForeignKey("ScheduleSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleTeachersBinding", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.ScheduleSubject", null)
                        .WithMany()
                        .HasForeignKey("ScheduleSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.Person", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentsSpecsBinding", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.Person", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.StudySpecialization", null)
                        .WithMany()
                        .HasForeignKey("StudySpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersSubjectsBinding", b =>
                {
                    b.HasOne("ScheduleManagement.Api.Entity.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleManagement.Api.Entity.StudySubject", null)
                        .WithMany()
                        .HasForeignKey("StudySubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleManagement.Api.Entity.ScheduleSubject", b =>
                {
                    b.Navigation("WeekScheduleOccurs");
                });
#pragma warning restore 612, 618
        }
    }
}
